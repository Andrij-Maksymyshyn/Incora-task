{"version":3,"file":"static/js/480.c47afa24.chunk.js","mappings":"4PAIaA,EAAUC,EAAAA,GAAAA,GAAH,sIAQPC,EAASD,EAAAA,GAAAA,GAAH,+GAMNE,EAAMF,EAAAA,GAAAA,IAAH,sEAMHG,EAAOH,EAAAA,GAAAA,IAAH,2DAKJI,EAAOJ,EAAAA,GAAAA,IAAH,2CAIJK,EAAIL,EAAAA,GAAAA,EAAH,8FAMDM,EAAKN,EAAAA,GAAAA,EAAH,6C,SCoCf,MAjEA,WACI,OAAgCO,EAAAA,EAAAA,UAAsC,IAAtE,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAA8BF,EAAAA,EAAAA,WAAkB,GAAhD,eAAOG,EAAP,KAAgBC,EAAhB,KACQC,GAAaC,EAAAA,EAAAA,MAAbD,SAmCR,OA9BAE,EAAAA,EAAAA,YAAU,WAENH,GAAW,IAERI,EAAAA,EAAAA,IAAkBH,GACbI,MAAK,SAAAC,GAED,IAAgBC,EAAWD,EAAnBA,KAAQC,KAMjB,GAHAT,EAAYS,GAGQ,IAAhBA,EAAKC,OACxB,OAAOC,EAAAA,GAAAA,MAAY,4CAEV,IACAC,OAAM,SAAAC,GAEF,OADDC,QAAQC,IAAI,kCAAmCF,GACvCF,EAAAA,GAAAA,MAAY,4CACvB,IACJK,SAAQ,WACLC,YAAW,WACTf,GAAW,EACZ,GAAE,IACJ,GAEN,GAAE,CAACC,KAIA,gCACKF,IAAW,SAACiB,EAAA,EAAD,IACXnB,IACO,SAACT,EAAD,UACMS,EAASoB,KAAI,gBAAEC,EAAF,EAAEA,QAASC,EAAX,EAAWA,KAAMC,EAAjB,EAAiBA,UAAWC,EAA5B,EAA4BA,aAA5B,OACf,UAAC/B,EAAD,YAEI,SAACE,EAAD,WACI,SAACD,EAAD,CAAK+B,IAAKD,EAAe,kCAAoCA,EAlDzE,8DAkDqGE,IAAKJ,OAElG,UAAC1B,EAAD,YACK,SAACC,EAAD,UAAIyB,IACHC,IAAa,UAACzB,EAAD,yBAAgByB,UAP1BF,EADE,QAoBtC,C,sECvEYM,E,QAAiBnC,GAAAA,IAAH,8F,kBCO3B,EANe,kBACb,SAACmC,EAAD,WACE,SAACC,EAAA,EAAD,KAFW,C,2NCDTC,EAAU,mCACVC,EAAW,+BAEV,SAAeC,IAAtB,4CAAO,OAAP,0BAAO,mGACUC,IAAAA,IAAA,UAAaF,EAAb,uCAAoDD,IAD9D,0GAIA,SAAeI,EAAtB,+CAAO,OAAP,0BAAO,WAAmCC,GAAnC,sFACUF,IAAAA,IAAA,UAAaF,EAAb,iCAA8CD,EAA9C,kBAA+DK,EAA/D,yBADV,0GAIA,SAAeC,EAAtB,+CAAO,OAAP,0BAAO,WAA8BC,GAA9B,sFACQJ,IAAAA,IAAA,UAAaF,EAAb,kBAA+BM,EAA/B,oBAAiDP,IADzD,0GAIA,SAAeQ,EAAtB,+CAAO,OAAP,0BAAO,WAA4BD,GAA5B,sFACQJ,IAAAA,IAAA,UAAaF,EAAb,kBAA+BM,EAA/B,2BAAwDP,IADhE,0GAIA,SAAetB,EAAtB,+CAAO,OAAP,0BAAO,WAAiC+B,GAAjC,sFACQN,IAAAA,IAAA,UAAaF,EAAb,kBAA+BQ,EAA/B,4BAA0DT,IADlE,0GAKA,SAAeU,EAAtB,+CAAO,OAAP,0BAAO,WAAiCD,GAAjC,sFACQN,IAAAA,IAAA,UAAaF,EAAb,kBAA+BQ,EAA/B,4BAA0DT,IADlE,0G","sources":["components/CastInfo/CastInfo.styled.jsx","components/CastInfo/CastInfo.tsx","components/Loader/Loader.styled.jsx","components/Loader/Loader.tsx","fetchApi/fetchApi.js"],"sourcesContent":["import styled from 'styled-components';\r\n\r\n\r\n\r\nexport const MainBox = styled.ul`\r\n    padding: 0 20px;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n    gap: 24px;\r\n`;\r\n\r\nexport const LiItem = styled.li`\r\ndisplay: flex;\r\nflex-direction: column;justify-content: space-between;\r\nwidth: 160px;\r\n`;\r\n\r\nexport const Img = styled.img`\r\ndisplay: block;\r\nwidth: 100%;\r\nheight: auto;\r\n`;\r\n\r\nexport const Div1 = styled.div`\r\nmax-width: 250px;\r\nheight: 240px;\r\n`;\r\n\r\nexport const Div2 = styled.div`\r\n    height: 91px;\r\n`;\r\n\r\nexport const P = styled.p`\r\n    font-size: 18px;\r\n    font-weight: 700;\r\n    text-align: center;\r\n`;\r\n\r\nexport const P2 = styled.p`\r\ntext-align: center;\r\n`\r\n\r\n","import { useState, useEffect } from 'react';\r\nimport { useParams } from \"react-router-dom\";\r\nimport { fetchMovieCredits } from '../../fetchApi/fetchApi';\r\nimport { toast } from 'react-hot-toast';\r\nimport Loader from '../Loader';\r\nimport { MainBox, LiItem, Img, Div1, Div2, P, P2 } from './CastInfo.styled';\r\n\r\nconst noPosterImg = 'https://sd.keepcalms.com/i/sorry-no-picture-available-2.png';\r\n\r\n\r\nfunction Cast() {\r\n    const [castInfo, setCastInfo] = useState<{ [key: string]: string }[]>([]);\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const { moviesId } = useParams();\r\n    \r\n   \r\n\r\n\r\n    useEffect(() => {\r\n\r\n        setLoading(true);\r\n\r\n           fetchMovieCredits(moviesId)\r\n               .then(data => {\r\n                   \r\n                    const { data: { cast } } = data;\r\n                \r\n                \r\n                   setCastInfo(cast);\r\n\r\n                                      \r\n                   if (cast.length === 0) {\r\n    return toast.error('There is no information about the cast...');\r\n                   };\r\n            })\r\n            .catch(error => {\r\n                console.log('Whoops, something went wrong...', error);\r\n                 return toast.error('There is no information about the cast...');\r\n            })\r\n        .finally(() => {\r\n            setTimeout(() => {\r\n              setLoading(false);\r\n            }, 1000)\r\n          });\r\n            \r\n    }, [moviesId]);    \r\n\r\n\r\n    return (\r\n        <>\r\n            {loading && <Loader />}\r\n            {castInfo && (                \r\n                    <MainBox>\r\n                         {castInfo.map(({cast_id, name, character, profile_path}) => (\r\n                        <LiItem key={cast_id}>\r\n                                 \r\n                            <Div1>\r\n                                <Img src={profile_path ? 'https://image.tmdb.org/t/p/w500' + profile_path : noPosterImg} alt={name} />\r\n                            </Div1>\r\n                            <Div2>\r\n                                 <P>{name}</P>\r\n                                 {character && <P2>Character: {character}</P2>}\r\n                            </Div2>\r\n                                \r\n                        </LiItem>\r\n                    ))}\r\n                   </MainBox>\r\n                \r\n            )}\r\n\r\n        </>\r\n\r\n    )\r\n};\r\n\r\nexport default Cast;","import styled from 'styled-components';\r\n\r\nexport const SpinnerWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;","import { SpinnerWrapper } from './Loader.styled';\r\nimport { CircularProgress } from '@mui/material';\r\n\r\nconst Loader = () => (\r\n  <SpinnerWrapper>\r\n    <CircularProgress />       \r\n  </SpinnerWrapper>\r\n);\r\n\r\nexport default Loader;\r\n\r\n\r\n","import axios from 'axios';\r\n\r\nconst API_KEY = '3b94c1b54af7d429587ecf26a37007c0';\r\nconst BASE_URL = 'https://api.themoviedb.org/3';\r\n\r\nexport async function fetchTrendCollection() {\r\n    return await axios.get(`${BASE_URL}/trending/movie/day?api_key=${API_KEY}`);\r\n    };\r\n\r\nexport async function fetchMovieByKeyWord(value) {\r\n    return await axios.get(`${BASE_URL}/search/movie?api_key=${API_KEY}&query=${value}&include_adult=false`);\r\n};\r\n\r\nexport async function fetchMovieById(filmId) {\r\n  return await axios.get(`${BASE_URL}/movie/${filmId}?api_key=${API_KEY}`);  \r\n};\r\n\r\nexport async function fetchTreiler(filmId) {\r\n  return await axios.get(`${BASE_URL}/movie/${filmId}/videos?api_key=${API_KEY}`);  \r\n};\r\n\r\nexport async function fetchMovieCredits(movieId) {\r\n  return await axios.get(`${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`);\r\n};\r\n \r\n\r\nexport async function fetchMovieReviews(movieId) {\r\n  return await axios.get(`${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`);  \r\n};\r\n"],"names":["MainBox","styled","LiItem","Img","Div1","Div2","P","P2","useState","castInfo","setCastInfo","loading","setLoading","moviesId","useParams","useEffect","fetchMovieCredits","then","data","cast","length","toast","catch","error","console","log","finally","setTimeout","Loader","map","cast_id","name","character","profile_path","src","alt","SpinnerWrapper","CircularProgress","API_KEY","BASE_URL","fetchTrendCollection","axios","fetchMovieByKeyWord","value","fetchMovieById","filmId","fetchTreiler","movieId","fetchMovieReviews"],"sourceRoot":""}